/*
Copyright (c) 2009 Sebastian Steiger, Integrated Systems Laboratory, ETH Zurich.
Comments, suggestions, criticism or bug reports are welcome: steiger@purdue.edu. 

This file is part of ANGEL, a simulator for LEDs based on the NEGF formalism.
The software is distributed under the Lesser GNU General Public License (LGPL).
ANGEL is free software: you can redistribute it and/or modify it under the terms 
of the Lesser GNU General Public License v3 or later. ANGEL is distributed
without any warranty; without even the implied warranty of merchantability or 
fitness for a particular purpose. See also <http://www.gnu.org/licenses/>.
*/
#include "Exception.h"
#include <stdio.h>
using namespace negf;

Exception::~Exception() {
}


/** Note: general exceptions should be generated by precompiler templates
 * @param explaining reason for exception
 * @param line line where exception was created (precomp directives)
 * @param pfile source file name where exception was raised
 * @param ptime compile time of source file object
 * @param pdate compile date of source file object
 * */
Exception::Exception(const char* preason, int line, const char* pfile, const char* pdate, const char* ptime, const char* pfunc) {
	this->reason = std::string();
	this->reason.append("\n");	
	this->reason.append(preason);	
	//this->append_info(line, pfile, pdate, ptime, pfunc);
	//this->reason.append("\n");	
}


/** \brief Constructor with an open argument list to use sprintf-like formatting */
Exception::Exception(unsigned int buflen, int line, const char* pfile, const char* pdate, 
					const char* ptime, const char* pfunc, const char* preason, ...) 
{
	this->reason = std::string();
	this->reason.append("\n");	
	
	// sprintf preason
   	va_list args;
   	va_start(args,preason);
   	char* buf = new char[buflen];
   	vsprintf(buf, preason, args);
	this->reason.append(buf);
	//this->reason.append("\n");	
   	delete[] buf;	
}


/** \brief Append exception place, file and version to reason */
void Exception::append_info(int line, const char* pfile, const char* pdate, const char* ptime, const char* pfunc) {
	char* buf = new char[10 + strlen(pfile) + strlen(pdate) + strlen(ptime) + 100];
	sprintf(buf, "\nException near line %d, function %s\n    in file %s, compiled %s %s", line, pfunc, pfile, pdate, ptime);
	this->reason.append(buf);
	delete[] buf;	
}



